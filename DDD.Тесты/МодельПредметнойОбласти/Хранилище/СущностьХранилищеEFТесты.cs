using System.Data.Common;
using AutoFixture.Kernel;
using AutoFixture.Xunit2;
using FluentResults.Extensions.FluentAssertions;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace gmafffff.СтартовыйНабор.DDD.Инфраструктура.Данные.Тесты;

public abstract class СущностьХранилищеEFТестыНастройка {
    protected readonly Fixture _тестОснастка = new();
    protected readonly DbContextOptions<КонтекстТестБд> Настройки;
    protected Клиент _клиент1;
    protected Поставщик _поставщик1;
    protected Поставщик _поставщик2;
    protected Поставщик _поставщик3;
    protected Поставщик[] _поставщики;

    protected СущностьХранилищеEFТестыНастройка(DbContextOptions<КонтекстТестБд> настройки) {
        Настройки = настройки;
        СоздатьФиктивныеСущности();
        ЗаполнитьБд();
    }

    protected КонтекстТестБд НовыйКонтекст() {
        return new КонтекстТестБд(Настройки);
    }

    protected void СоздатьФиктивныеСущности() {
        var контекст = new SpecimenContext(new Fixture());
        var длинаСтроки = new ConstrainedStringRequest(3, 16);

        _тестОснастка.Customize<string>(composer => composer
            .FromFactory(() => контекст.Resolve(длинаСтроки) as string));

        _клиент1 = _тестОснастка.Create<Клиент>();
        _поставщик1 = _тестОснастка.Create<Поставщик>();
        _поставщик2 = _тестОснастка.Create<Поставщик>();
        _поставщик3 = _тестОснастка.Create<Поставщик>();
        _поставщики = new[] { _поставщик1, _поставщик2, _поставщик3 };
    }

    public void ЗаполнитьБд() {
        using var контекст = НовыйКонтекст();
        контекст.Database.EnsureDeleted();
        контекст.Database.EnsureCreated();

        ТестовыйРепоПоставщик поставщики = new(контекст);
        ТестовыйРепоКлиент клиенты = new(контекст);
        поставщики.Добавь(_поставщики);
        клиенты.Добавь(_клиент1);

        контекст.SaveChanges().Should().BeGreaterThan(0);
    }

    [AttributeUsage(AttributeTargets.Method)]
    private class АвтоДанныеAttribute : AutoDataAttribute {
        public АвтоДанныеAttribute() : base(НастроитьОснастку) { }

        private static IFixture НастроитьОснастку() {
            var оснастка = new Fixture();

            var контекст = new SpecimenContext(new Fixture());
            var длинаСтроки = new ConstrainedStringRequest(3, 16);

            оснастка.Customize<string>(composer => composer
                .FromFactory(() => контекст.Resolve(длинаСтроки) as string));

            return оснастка;
        }
    }

    #region Синхронные тесты

    [Fact]
    public void МожноНайтиСущность() {
        using var контекст = НовыйКонтекст();
        ТестовыйРепоПоставщик поставщики = new(контекст);
        поставщики.Найди(_поставщик1.Ид)
            .Should().Be(_поставщик1);
        поставщики.Найди(п => п.Ид == _поставщик1.Ид)
            .Should().ContainSingle(п => п == _поставщик1);
    }

    [Fact]
    public void МожноНайтиСущностьПоИндексу() {
        using var контекст = НовыйКонтекст();
        ТестовыйРепоПоставщик поставщики = new(контекст);
        поставщики[_поставщик1.Ид].Should().Be(_поставщик1);
        поставщики[п => п.Ид == _поставщик1.Ид].Should().ContainSingle(п => п == _поставщик1);
    }

    [Theory]
    [АвтоДанные]
    public void МожноДобавитьСущность(Клиент клиент) {
        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоКлиент клиенты = new(контекст);
            клиенты.Добавь(клиент);
            клиенты.СохраниИОтдайСобытия().Should().BeSuccess();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоКлиент клиенты = new(контекст);
            var rez = клиенты.Найди(клиент.Ид);
            rez.Should().NotBeNull();
            клиент.Should().Be(rez);
            rez.Emailы.Should().BeEquivalentTo(клиент.Emailы);
        }
    }

    [Theory]
    [АвтоДанные]
    public void МожноДобавитьСущности(Клиент клиент1, Клиент клиент2) {
        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоКлиент клиенты = new(контекст);
            клиенты.Добавь(new[] { клиент1, клиент2 });
            клиенты.СохраниИОтдайСобытия().Should().BeSuccess();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоКлиент клиенты = new(контекст);
            var rez = клиенты.Найди(клиент => true);
            rez.Should().BeEquivalentTo(new[] { клиент1, клиент2, _клиент1 });
        }
    }

    [Fact]
    public void МожноУдалитьСущность() {
        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            поставщики.Удали(_поставщик1);
            поставщики.СохраниИОтдайСобытия().Should().BeSuccess();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            поставщики.Найди(_поставщик1.Ид).Should().BeNull();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            поставщики.Удали(_поставщик2.Ид);
            поставщики.СохраниИОтдайСобытия().Should().BeSuccess();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            поставщики.Найди(_поставщик2.Ид).Should().BeNull();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            поставщики.Удали(п => true);
            поставщики.СохраниИОтдайСобытия().Should().BeSuccess();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            поставщики.Найди(_поставщик3.Ид).Should().BeNull();
        }
    }

    [Fact]
    public void МожноУдалитьСущности() {
        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            поставщики.Удали(_поставщики);
            поставщики.СохраниИОтдайСобытия().Should().BeSuccess();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            поставщики.Найди(п => true).Should().BeEmpty();
        }
    }

    [Fact]
    public void МожноПосчитатьСущности() {
        using var контекст = НовыйКонтекст();
        ТестовыйРепоПоставщик поставщики = new(контекст);
        поставщики.ДайРазмер().Should().Be(_поставщики.Length);
    }

    [Fact]
    public void МожноПосчитатьСущностиПоУсловию() {
        using var контекст = НовыйКонтекст();
        ТестовыйРепоПоставщик хранилище = new(контекст);
        хранилище.ДайРазмерПоУсловию(п => п.Название != _поставщик1.Название)
            .Should().Be(_поставщики.Length - 1);
    }

    [Fact]
    public void СохранениеВозвращаетСобытия() {
        using var контекст = НовыйКонтекст();
        ТестовыйРепоКлиент клиенты = new(контекст);
        клиенты.Найди(_клиент1.Ид).ДобавитьEmail(_тестОснастка.Create<Email>());
        var события = клиенты.СохраниИОтдайСобытия().Should().BeSuccess().Subject;
        события.Value.OfType<ДобавленEMailСобытие>().Should().ContainSingle();
        события.Value.OfType<ДобавленEMailСобытие>().First().ОтправительИд.Should().Be(_клиент1.Ид);
    }

    /// <summary>
    ///     Этот тест скорее относится к классу <see cref="СобытиеМодели{ТИд}" />
    /// </summary>
    [Theory]
    [АвтоДанные]
    public void СобытиеДобавляемойСущностиПолучаетИдОтправителя(Клиент клиент, Email email) {
        клиент.ДобавитьEmail(email);
        var событие = клиент.СобытияМодели.OfType<ДобавленEMailСобытие>().First();
        var ид = событие.ОтправительИд;
        ид.Should().Be(Guid.Empty);

        using var контекст = НовыйКонтекст();
        ТестовыйРепоКлиент клиенты = new(контекст);
        клиенты.Добавь(клиент);
        событие = клиенты.СохраниИОтдайСобытия().Should().BeSuccess().Subject.Value.OfType<ДобавленEMailСобытие>()
            .First();
        ид = событие.ОтправительИд;
        ид.Should().Be(клиент.Ид);
        ид.Should().NotBe(Guid.Empty);
    }

    [Theory]
    [АвтоДанные]
    public void ЗагружаютсяСвойстваНавигации(Заказ заказ, СтрокаЗаказа[] строки) {
        заказ.ДобавитьСтроку(строки[0]);
        заказ.ДобавитьСтроку(строки[1]);
        заказ.ДобавитьСтроку(строки[2]);
        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоЗаказ заказы = new(контекст);
            заказы.Добавь(заказ);
            заказы.СохраниИОтдайСобытия().Should().BeSuccess();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоЗаказ заказы = new(контекст);
            var заказБд = заказы.Найди(заказ.Ид);
            var доступNull = () => заказБд.Клиент.Ид;
            доступNull.Should().Throw<NullReferenceException>();
        }

        using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоЗаказ заказы = new(контекст) {
                АвтоЗагружаемыеСвязанныеСущности = заказы => заказы
                    .Include(заказ => заказ.Клиент)
                    .Include(заказ => заказ.СтрокиЗаказа)
                    .ThenInclude(стр => стр.Товар)
                    .ThenInclude(товар => товар.Поставщик)
            };
            var заказБд = заказы.Найди(заказ.Ид);
            var нетИскл1 = заказБд.Клиент.Ид;
            var нетИскл2 = заказБд.СтрокиЗаказа.First().Товар.Поставщик.Ид;
        }
    }

    #endregion

    #region Асинхронные тесты

    [Fact]
    public async void МожноНайтиСущностьАсинх() {
        await using var контекст = НовыйКонтекст();
        ТестовыйРепоПоставщик поставщики = new(контекст);
        (await поставщики.НайдиАсинх(_поставщик1.Ид))
            .Should().Be(_поставщик1);
        (await поставщики.НайдиАсинх(п => п.Ид == _поставщик1.Ид))
            .Should().ContainSingle(п => п == _поставщик1);
    }

    [Theory]
    [АвтоДанные]
    public async void МожноДобавитьСущностьАсинх(Клиент клиент) {
        await using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоКлиент клиенты = new(контекст);
            клиенты.Добавь(клиент);
            await клиенты.СохраниИОтдайСобытияАсинх();
        }

        await using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоКлиент клиенты = new(контекст);
            var rez = await клиенты.НайдиАсинх(клиент.Ид);
            rez.Should().NotBeNull();
            клиент.Should().Be(rez);
            rez.Emailы.Should().BeEquivalentTo(клиент.Emailы);
        }
    }

    [Theory]
    [АвтоДанные]
    public async void МожноДобавитьСущностиАсинх(Клиент клиент) {
        await using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоКлиент клиенты = new(контекст);
            клиенты.Добавь(new[] { клиент });
            await клиенты.СохраниИОтдайСобытияАсинх();
        }

        await using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоКлиент клиенты = new(контекст);
            var rez = await клиенты.НайдиАсинх(клиент => true);
            rez.Should().BeEquivalentTo(new[] { клиент, _клиент1 });
        }
    }

    [Fact]
    public async void МожноУдалитьСущностьАсинх() {
        await using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            await поставщики.УдалиАсинх(п => true);
            await поставщики.СохраниИОтдайСобытияАсинх();
        }

        await using (var контекст = НовыйКонтекст()) {
            ТестовыйРепоПоставщик поставщики = new(контекст);
            (await поставщики.НайдиАсинх(_поставщик3.Ид)).Should().BeNull();
        }
    }

    [Fact]
    public async void МожноПосчитатьСущностиАсинх() {
        await using var контекст = НовыйКонтекст();
        ТестовыйРепоПоставщик поставщики = new(контекст);
        (await поставщики.ДайРазмерАсинх()).Should().Be(_поставщики.Length);
    }

    [Fact]
    public async void МожноПосчитатьСущностиПоУсловиюАсинх() {
        await using var контекст = НовыйКонтекст();
        ТестовыйРепоПоставщик хранилище = new(контекст);
        (await хранилище.ДайРазмерПоУсловиюАсинх(п => п.Название != _поставщик1.Название))
            .Should().Be(_поставщики.Length - 1);
    }

    [Fact]
    public async void СохранениеВозвращаетСобытияАсинх() {
        await using var контекст = НовыйКонтекст();
        ТестовыйРепоКлиент клиенты = new(контекст);
        (await клиенты.НайдиАсинх(_клиент1.Ид)).ДобавитьEmail(new Email("email3@site.test"));
        var события = await клиенты.СохраниИОтдайСобытияАсинх();
        события.Value.OfType<ДобавленEMailСобытие>().Should().ContainSingle();
        события.Value.OfType<ДобавленEMailСобытие>().First().ОтправительИд.Should().Be(_клиент1.Ид);
    }

    #endregion
}

/// <summary>
///     Реализация тестового класса для БД SQLite
/// </summary>
public class СущностьХранилищеEFТестыSQLite : СущностьХранилищеEFТестыНастройка, IDisposable {
    private readonly DbConnection? _соединение;
    private bool _уничтоженЛи;

    public СущностьХранилищеEFТестыSQLite()
        : base(new DbContextOptionsBuilder<КонтекстТестБд>()
            .UseSqlite(СоздатьБдВПамяти()).Options) {
        _соединение = RelationalOptionsExtension.Extract(Настройки).Connection;
    }

    public void Dispose() {
        if (_уничтоженЛи) return;
        _уничтоженЛи = true;

        _соединение.Dispose();
    }

    protected static DbConnection СоздатьБдВПамяти() {
        var соединение = new SqliteConnection("Filename=:memory:");
        соединение.Open();
        return соединение;
    }
}