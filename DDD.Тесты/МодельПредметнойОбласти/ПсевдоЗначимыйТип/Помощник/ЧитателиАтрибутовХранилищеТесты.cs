namespace gmafffff.СтартовыйНабор.DDD.МодельПредметнойОбласти.Тесты;

public class ЧитателиАтрибутовХранилищеТесты {
    protected readonly Fixture ТестОснастка = new();

    [Fact]
    public void ХранилищеОтдаетАтрибутыТипа() {
        var хр = new ЧитателиАтрибутов_Хранилище(new HashSet<Type>(new[] { typeof(ПсевдоЗначимыйТип) }));
        var читатели = хр.ДайСчитывателиЗначений(typeof(Велосипед));

        var велосипед = ТестОснастка.Create<Велосипед>();
        var (ЧислоКолес, Вместимость, Марка, Тяга) = велосипед;
        var знач = читатели.Преобразуй(чч => чч.ToDictionary(ч => ч.ИмяАтрибута, ч => ч.ДайЗначение(велосипед)));
        ЧислоКолес.Should().Be((byte?)знач.Value[nameof(ЧислоКолес)]);
        Вместимость.Should().Be((int?)знач.Value[nameof(Вместимость)]);
        Марка.Should().Be((string?)знач.Value[nameof(Марка)]);
        Тяга.Should().Be((ТипТяги?)знач.Value[nameof(Тяга)]);
        Тяга.Should().Be((ТипТяги?)знач.Value[nameof(Тяга)]);

        const float Масса = 101;
        var танк = new Танк { Масса = Масса };
        читатели = хр.ДайСчитывателиЗначений(typeof(Танк));
        знач = читатели.Преобразуй(чч => чч.ToDictionary(ч => ч.ИмяАтрибута, ч => ч.ДайЗначение(танк)));
        Масса.Should().Be((float)знач.Value[nameof(Масса)]);
    }

    [Fact]
    public void ХранилищеОтдаетОдниИТеЖеАтрибутыТипа() {
        var хр = new ЧитателиАтрибутов_Хранилище(new HashSet<Type>(new[] { typeof(ПсевдоЗначимыйТип) }));
        var читатели1 = хр.ДайСчитывателиЗначений(typeof(Велосипед));
        var читатели2 = хр.ДайСчитывателиЗначений(typeof(Велосипед));
        читатели1.Value.Should().BeSameAs(читатели2.Value);
    }

    [Fact]
    public void ХранилищеУмеетФильтроватьАтрибутыБазовыхКлассов() {
        var хр = new ЧитателиАтрибутов_Хранилище(new HashSet<Type>(new[] { typeof(Транспорт) }));
        var читатели = хр.ДайСчитывателиЗначений(typeof(Велосипед));

        var велосипед = ТестОснастка.Create<Велосипед>();
        var (ЧислоКолес, Вместимость, Марка, Тяга) = велосипед;
        var знач = читатели.Преобразуй(чч => чч.ToDictionary(ч => ч.ИмяАтрибута, ч => ч.ДайЗначение(велосипед)));
        ЧислоКолес.Should().Be((byte?)знач.Value[nameof(ЧислоКолес)]);

        Action<string> индексторТестер = имя => _ = знач.Value[имя];

        индексторТестер.Bind(nameof(Вместимость)).Should().Throw<KeyNotFoundException>();
        индексторТестер.Bind(nameof(Марка)).Should().Throw<KeyNotFoundException>();
        индексторТестер.Bind(nameof(Тяга)).Should().Throw<KeyNotFoundException>();
    }
}