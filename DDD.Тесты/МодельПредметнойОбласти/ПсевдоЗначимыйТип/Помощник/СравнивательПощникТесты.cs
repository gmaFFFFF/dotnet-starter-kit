using static gmafffff.СтартовыйНабор.DDD.МодельПредметнойОбласти.Помощник.Сравниватель_Помощник;

namespace gmafffff.СтартовыйНабор.DDD.МодельПредметнойОбласти.Тесты;

public class СравнивательПощникТесты {
    [Fact]
    private void ВозвращаетИерархиюТипов() {
        Type[] результат = {
            typeof(Танк), typeof(СпециальныйАвтомобиль), typeof(Автомобиль), typeof(Машина), typeof(Транспорт),
            typeof(ПсевдоЗначимыйТип), typeof(object)
        };
        ДайВсюИерахиюТипов(typeof(Танк))
            .Should().Equal(результат);
    }

    [Fact]
    private void НаходитБлижайшегоОбщегоПредка() {
        НайдиПервогоОбщегоПредка(typeof(Танк), typeof(Поезд)).Value
            .Should().Be(typeof(Машина));
    }

    [Fact]
    public void ВозвращаетВсеПубличныеАтрибутыОбъекта() {
        var результат = ДайСчитывателиПубличныхАтрибутовЭкземпляра(typeof(Танк))
            .ValueOrDefault;
        Танк танк = new() { Вместимость = 4, Кузов = "бронированный", МаксВыстрелов = 55, Масса = 10 };
        результат.Select(читатель => читатель.ДайЗначение(танк))
            .Should()
            .Equal(танк.Масса, танк.МаксВыстрелов);
    }

    [Fact]
    public void СравниваетОбъектыПоТипу() {
        СравнитьПоТипу(new Танк(), new Танк()).Value.Should().Be(0);
        СравнитьПоТипу(new Автомобиль(), new Танк()).Value.Should().Be(-1);
        СравнитьПоТипу(new Танк(), new Автомобиль()).Value.Should().Be(1);
        СравнитьПоТипу(new Велосипед(), new Автомобиль()).Value.Should().Be(1);
    }

    [Fact]
    public void СравниваетОбъектыПоСсылке() {
        var тест = new Танк();
        СравнитьПоСсылке(null, null).Should().Be(0);
        СравнитьПоСсылке(тест, тест).Should().Be(0);
        СравнитьПоСсылке(null, тест).Should().Be(-1);
        СравнитьПоСсылке(тест, null).Should().Be(1);
        СравнитьПоСсылке(тест, new Танк()).Should().BeNull();
    }

    [Fact]
    public void СравниваетСписокЗначений() {
        var тест0L = new object[] { 3 };
        var тест0R = new object[] { 3.141 };
        СравнитьСписокЗначений(тест0L, тест0R).Value.Should().Be(-1);
        СравнитьСписокЗначений(тест0R, тест0L).Value.Should().Be(1);
        const string тестЗнач = "";
        СравнитьСписокЗначений(new[] { тестЗнач }, new[] { тестЗнач }).Value.Should().Be(0);
        var тест1 = new object?[] { тестЗнач, null };
        СравнитьСписокЗначений(тест1, тест1).Value.Should().Be(0);
        var тест11L = тест1.Append(null).ToArray();
        var тест11R = тест1.Append("1").ToArray();
        СравнитьСписокЗначений(тест11L, тест11R).Value.Should().Be(-1);
        СравнитьСписокЗначений(тест11R, тест11L).Value.Should().Be(1);
        var тест2 = тест1.Append("1").ToArray();
        СравнитьСписокЗначений(тест2, тест2).Value.Should().Be(0);
        var тест21L = тест2.Append(1).ToArray();
        var тест21R = тест2.Append(3.141).ToArray();
        var тест21Rr = тест2.Append(5).ToArray();
        СравнитьСписокЗначений(тест21L, тест21R).Value.Should().Be(-1);
        СравнитьСписокЗначений(тест21R, тест21L).Value.Should().Be(1);
        СравнитьСписокЗначений(тест21Rr, тест21R).Value.Should().Be(1);
        СравнитьСписокЗначений(тест21R, тест21Rr).Value.Should().Be(-1);
        var тест3 = тест2.Append(3.141).ToArray();
        СравнитьСписокЗначений(тест3, тест3).Value.Should().Be(0);
        var тест31L = тест3.Append(тест11L).ToArray();
        var тест31R = тест3.Append(тест11R).ToArray();
        СравнитьСписокЗначений(тест31L, тест31R).Value.Should().Be(-1);
        СравнитьСписокЗначений(тест31R, тест31L).Value.Should().Be(1);
        var тест4 = тест3.Append(тест2);
        СравнитьСписокЗначений(тест2, тест2).Value.Should().Be(0);
        var тест41L = тест3.Append(тест21L).ToArray();
        var тест41R = тест3.Append(тест21R).ToArray();
        var тест41Rr = тест3.Append(тест21Rr).ToArray();
        СравнитьСписокЗначений(тест41L, тест41R).Value.Should().Be(-1);
        СравнитьСписокЗначений(тест41R, тест41L).Value.Should().Be(1);
        СравнитьСписокЗначений(тест41Rr, тест41R).Value.Should().Be(1);
        СравнитьСписокЗначений(тест41R, тест41Rr).Value.Should().Be(-1);
        var тест5 = тест4.Append(тест3);
        СравнитьСписокЗначений(тест5, тест5).Value.Should().Be(0);
        var тест51L = тест5.Append(тест41L).ToArray();
        var тест51R = тест5.Append(тест41R).ToArray();
        СравнитьСписокЗначений(тест41L, тест41R).Value.Should().Be(-1);
        СравнитьСписокЗначений(тест41R, тест41L).Value.Should().Be(1);

        СравнитьСписокЗначений(тест5, тест51L).Value.Should().Be(-1);
        СравнитьСписокЗначений(тест51L, тест5).Value.Should().Be(1);
        СравнитьСписокЗначений(тест51L, тест51R).Value.Should().Be(-1);
        СравнитьСписокЗначений(тест51R, тест51L).Value.Should().Be(1);
    }

    [Fact]
    public void СравниваетПоЗначениямАтрибутов() {
        var о1 = new Велосипед { Марка = "Дружок", Вместимость = 1, ЧислоКолес = 2 };
        var о2 = new Велосипед { Марка = "Дружок", Вместимость = 1, ЧислоКолес = 4 };
        var о3 = new Велосипед { Марка = "Аист", Вместимость = 1, ЧислоКолес = 2 };
        var атрибуты = ДайСчитывателиПубличныхАтрибутовЭкземпляра(typeof(Велосипед));
        СравнитьОбъектыПоЗначениямАтрибутов(о1, о3, атрибуты.Value).Value.Should()
            .Be(0); // Марка - унаследованный атрибут, поэтому не участвует в сравнении
        СравнитьОбъектыПоЗначениямАтрибутов(о1, о2, атрибуты.Value).Value.Should().Be(-1);
        СравнитьОбъектыПоЗначениямАтрибутов(о2, о1, атрибуты.Value).Value.Should().Be(1);
    }

    [Fact]
    public void РассчитываетХэшКод() {
        var атрибуты = ДайСчитывателиПубличныхАтрибутовЭкземпляра(typeof(Велосипед));
        var о1 = new Велосипед { Марка = "Дружок", Вместимость = 1, ЧислоКолес = 2 };
        var о11 = new Велосипед { Марка = "Дружок", Вместимость = 1, ЧислоКолес = 2 };
        var о2 = new Велосипед { Марка = "Дружок", Вместимость = 1, ЧислоКолес = 4 };
        var о3 = new Велосипед { Марка = "Аист", Вместимость = 1, ЧислоКолес = 2 };

        РассчитайХэшКод(о1, атрибуты.Value).Should().Be(РассчитайХэшКод(о11, атрибуты.Value));
        РассчитайХэшКод(о1, атрибуты.Value).Should()
            .Be(РассчитайХэшКод(о3,
                атрибуты.Value)); // Марка - унаследованный атрибут, поэтому не участвует в сравнении
        РассчитайХэшКод(о1, атрибуты.Value).Should().NotBe(РассчитайХэшКод(о2, атрибуты.Value));
    }

    [Fact]
    public void СравниваетОъектыСоСписком() {
        //TODO: Нестабильная работа... Не всегда перемешивание меняет порядок
        var г1 = new Автоколонна(ТестовыйНабор.Атрибуты.OfType<Транспорт>());
        var г2 = new Автоколонна(ТестовыйНабор.ПеремешанныеАтрибуты.OfType<Транспорт>());
        г1.Equals(г2).Should().Be(false);
    }
}